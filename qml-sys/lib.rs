/* automatically generated by rust-bindgen */

/// A pointer to a QVariant
pub type DosQVariant = ::std::os::raw::c_void;
/// A pointer to a QModelIndex
pub type DosQModelIndex = ::std::os::raw::c_void;
/// A pointer to a QAbstractItemModel
pub type DosQAbstractItemModel = ::std::os::raw::c_void;
/// A pointer to a QAbstractListModel
pub type DosQAbstractListModel = ::std::os::raw::c_void;
/// A pointer to a QAbstractTableModel
pub type DosQAbstractTableModel = ::std::os::raw::c_void;
/// A pointer to a QQmlApplicationEngine
pub type DosQQmlApplicationEngine = ::std::os::raw::c_void;
/// A pointer to a QQuickView
pub type DosQQuickView = ::std::os::raw::c_void;
/// A pointer to a QQmlContext
pub type DosQQmlContext = ::std::os::raw::c_void;
/// A pointer to a QHash<int,QByteArray>
pub type DosQHashIntQByteArray = ::std::os::raw::c_void;
/// A pointer to a QUrl
pub type DosQUrl = ::std::os::raw::c_void;
/// A pointer to a QMetaObject
pub type DosQMetaObject = ::std::os::raw::c_void;
/// A pointer to a QObject
pub type DosQObject = ::std::os::raw::c_void;
/// A pointer to a QQuickImageProvider
pub type DosQQuickImageProvider = ::std::os::raw::c_void;
/// A pointer to a QPixmap
pub type DosPixmap = ::std::os::raw::c_void;
/// A pixmap callback to be supplied to an image provider
/// \param id Image source id
/// \param width pointer to the width of the image
/// \param height pointer to the height of the image
/// \param requestedHeight sourceSize.height attribute
/// \param requestedWidth sourcesSize.width attribute
/// \param[out] result The result QPixmap. This should be assigned from the binded language
/// \note \p id is the trailing part of an image source url for example "image://<provider_id>/<id>
/// \note The \p result arg is an out parameter so it \b shouldn't be deleted. See the dos_qpixmap_assign
pub type RequestPixmapCallback = ::std::option::Option<
    unsafe extern "C" fn(
        id: *const ::std::os::raw::c_char,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        requestedWidth: ::std::os::raw::c_int,
        requestedHeight: ::std::os::raw::c_int,
        result: *mut DosPixmap,
    ),
>;
/// Called when a property is readed/written or a slot should be executed
/// \param self The pointer of QObject in the binded language
/// \param slotName The slotName as DosQVariant
/// \param argc The number of arguments
/// \param argv An array of DosQVariant pointers
/// \note The first argument of \p argv is always the return value of the called slot.
/// In other words the length of argv is always 1 + number of arguments of \p slotName.
/// The return value should be assigned and modified by calling the dos_qvariant_assign()
/// or other dos_qvariant_set... setters.
/// \note The \p slotName is owned by the library thus it \b shouldn't be deleted
/// \note The \p argv array is owned by the library thus it \b shouldn't be deleted
pub type DObjectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        slotName: *mut DosQVariant,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut DosQVariant,
    ),
>;
/// Called when the QAbstractItemModel::rowCount method must be executed
/// \param self The pointer of the QAbstractItemModel in the binded language
/// \param index The parent DosQModelIndex
/// \param[out] result The rowCount result. This must be deferenced and filled from the binded language
/// \note The \p parent QModelIndex is owned by the DOtherSide library thus it \b shouldn't be deleted
/// \note The \p result arg is an out parameter so it \b shouldn't be deleted
pub type RowCountCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        parent: *const DosQModelIndex,
        result: *mut ::std::os::raw::c_int,
    ),
>;
/// Called when the QAbstractItemModel::columnCount method must be executed
/// \param self The pointer to the QAbstractItemModel in the binded language
/// \param index The parent DosQModelIndex
/// \param[out] result The rowCount result. This must be deferenced and filled from the binded language
/// \note The \p parent QModelIndex is owned by the DOtherSide library thus it \b shouldn't be deleted
/// \note The \p result arg is an out parameter so it \b shouldn't be deleted
pub type ColumnCountCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        parent: *const DosQModelIndex,
        result: *mut ::std::os::raw::c_int,
    ),
>;
/// Called when the QAbstractItemModel::data method must be executed
/// \param self The pointer to the QAbstractItemModel in the binded language
/// \param index The DosQModelIndex to which we request the data
/// \param[out] result The DosQVariant result. This must be deferenced and filled from the binded language.
/// \note The \p index QModelIndex is owned by the DOtherSide library thus it \b shouldn't be deleted
/// \note The \p result arg is an out parameter so it \b shouldn't be deleted
pub type DataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        index: *const DosQModelIndex,
        role: ::std::os::raw::c_int,
        result: *mut DosQVariant,
    ),
>;
/// Called when the QAbstractItemModel::setData method must be executed
pub type SetDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        index: *const DosQModelIndex,
        value: *const DosQVariant,
        role: ::std::os::raw::c_int,
        result: *mut bool,
    ),
>;
/// Called when the QAbstractItemModel::roleNames method must be executed
pub type RoleNamesCallback = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, result: *mut DosQHashIntQByteArray),
>;
/// Called when the QAbstractItemModel::flags method must be called
pub type FlagsCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        index: *const DosQModelIndex,
        result: *mut ::std::os::raw::c_int,
    ),
>;
/// Called when the QAbstractItemModel::headerData method must be called
pub type HeaderDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        section: ::std::os::raw::c_int,
        orientation: ::std::os::raw::c_int,
        role: ::std::os::raw::c_int,
        result: *mut DosQVariant,
    ),
>;
/// Called when the QAbstractItemModel::index method must be called
pub type IndexCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
        parent: *const DosQModelIndex,
        result: *mut DosQModelIndex,
    ),
>;
/// Called when the QAbstractItemModel::parent method must be called
pub type ParentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        child: *const DosQModelIndex,
        result: *mut DosQModelIndex,
    ),
>;
/// Called when the QAbstractItemModel::hasChildren method must be called
pub type HasChildrenCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        parent: *const DosQModelIndex,
        result: *mut bool,
    ),
>;
/// Called when the QAbstractItemModel::canFetchMore method must be called
pub type CanFetchMoreCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        parent: *const DosQModelIndex,
        result: *mut bool,
    ),
>;
/// Called when the QAbstractItemModel::fetchMore method must be called
pub type FetchMoreCallback = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, parent: *const DosQModelIndex),
>;
/// Callback called from QML for creating a registered type
/// **
/// * When a type is created through the QML engine a new QObject \p "Wrapper" is created. This becomes a proxy
/// * between the "default" QObject created through dos_qobject_create() and the QML engine. This imply that implementation
/// * for this callback should swap the DosQObject* stored in the binded language with the wrapper. At the end the wrapper
/// * becomes the owner of the original "default" DosQObject. Furthermore if the binding language is garbage collected you
/// * should disable (pin/ref) the original object and unref in the DeleteDObject() callback. Since the wrapper has been created
/// * from QML is QML that expect to free the memory for it thus it shouldn't be destroyed by the QObject in the binded language.
/// *
/// * An example of implementation in pseudocode is: \n
/// * \code{.nim}
/// proc createCallback(.....) =
/// # Call the constructor for the given type and create a QObject in Nim
/// let nimQObject = constructorMap[id]()
///
/// # Disable GC
/// GC.ref(nimQObject)
///
/// # Retrieve the DosQObject created dos_qobject_create() inside the nimQObject
/// *dosQObject = nimQObject.vptr
///
/// # Store the pointer to the nimQObject
/// *bindedQObject = cast[ptr](&nimQObject)
///
/// # Swap the vptr inside the nimQObject with the wrapper
/// nimQObject.vptr = wrapper
///
/// # The QObject in the Nim language should not destroy its inner DosQObject
/// nimQObject.owner = false
///
/// \endcode
///
/// * \param id This is the id for which we are requesting the creation.
/// * This is the same value that was returned during registration through the calls
/// * to dos_qdeclarative_qmlregistertype() or dos_qdeclarative_qmlregistersingletontype()
/// * \param wrapper This is the QObject wrapper that should be stored by the binded language and to which forward the
/// * DOtherSide calls
/// * \param bindedQObject This should be deferenced and assigned with the pointer of the QObject modeled in the binded language
/// * \param dosQObject This should be deferenced and assigned with the DosQObject pointer you gained from calling the dos_qobject_create() function
/// */
pub type CreateDObject = ::std::option::Option<
    unsafe extern "C" fn(
        id: ::std::os::raw::c_int,
        wrapper: *mut ::std::os::raw::c_void,
        bindedQObject: *mut *mut ::std::os::raw::c_void,
        dosQObject: *mut *mut ::std::os::raw::c_void,
    ),
>;
/// Callback invoked from QML for deleting a registered type
/// **
/// * This is called when the wrapper gets deleted from QML. The implementation should unref/unpin
/// * the \p bindedQObject or delete it in the case of languages without GC
/// * \param id This is the type id for which we are requesting the deletion
/// * \param bindedQObject This is the pointer you given in the CreateDObject callback and you can use it
/// * for obtaining the QObject in your binded language. This allows you to unpin/unref it or delete it.
/// */
pub type DeleteDObject = ::std::option::Option<
    unsafe extern "C" fn(id: ::std::os::raw::c_int, bindedQObject: *mut ::std::os::raw::c_void),
>;
/// \brief Store an array of QVariant
/// \note This struct should be freed by calling dos_qvariantarray_delete(DosQVariantArray *ptr). This in turn
/// cleans up the internal array
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DosQVariantArray {
    /// The number of elements
    pub size: ::std::os::raw::c_int,
    /// The array
    pub data: *mut *mut DosQVariant,
}
#[test]
fn bindgen_test_layout_DosQVariantArray() {
    assert_eq!(
        ::std::mem::size_of::<DosQVariantArray>(),
        16usize,
        concat!("Size of: ", stringify!(DosQVariantArray))
    );
    assert_eq!(
        ::std::mem::align_of::<DosQVariantArray>(),
        8usize,
        concat!("Alignment of ", stringify!(DosQVariantArray))
    );
}
/// The data needed for registering a custom type in the QML environment
/// **
/// * This is used from dos_qdeclarative_qmlregistertype() and dos_qdeclarative_qmlregistersingletontype() calls.
/// * \see dos_qdeclarative_qmlregistertype()
/// * \see dos_qdeclarative_qmlregistersingletontype()
/// * \note All string and objects are considered to be owned by the caller thus they'll
/// * not be freed
/// */
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QmlRegisterType {
    /// The Module major version
    pub major: ::std::os::raw::c_int,
    /// The Module minor version
    pub minor: ::std::os::raw::c_int,
    /// The Module uri
    pub uri: *const ::std::os::raw::c_char,
    /// The type name to be used in QML files
    pub qml: *const ::std::os::raw::c_char,
    /// The type QMetaObject
    pub staticMetaObject: *mut DosQMetaObject,
    /// The callback invoked from QML when this type should be created
    pub createDObject: CreateDObject,
    /// The callback invoked from QML when this type should be deleted
    pub deleteDObject: DeleteDObject,
}
#[test]
fn bindgen_test_layout_QmlRegisterType() {
    assert_eq!(
        ::std::mem::size_of::<QmlRegisterType>(),
        48usize,
        concat!("Size of: ", stringify!(QmlRegisterType))
    );
    assert_eq!(
        ::std::mem::align_of::<QmlRegisterType>(),
        8usize,
        concat!("Alignment of ", stringify!(QmlRegisterType))
    );
}
/// Represents a parameter definition
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParameterDefinition {
    /// The parameter name
    pub name: *const ::std::os::raw::c_char,
    /// The parameter metatype
    pub metaType: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ParameterDefinition() {
    assert_eq!(
        ::std::mem::size_of::<ParameterDefinition>(),
        16usize,
        concat!("Size of: ", stringify!(ParameterDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<ParameterDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(ParameterDefinition))
    );
}
/// Represents a single signal definition
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SignalDefinition {
    /// The signal name
    pub name: *const ::std::os::raw::c_char,
    /// The parameters count
    pub parametersCount: ::std::os::raw::c_int,
    /// The parameters
    pub parameters: *mut ParameterDefinition,
}
#[test]
fn bindgen_test_layout_SignalDefinition() {
    assert_eq!(
        ::std::mem::size_of::<SignalDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(SignalDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<SignalDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(SignalDefinition))
    );
}
/// Represents a set of signal definitions
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SignalDefinitions {
    /// The total number of signals
    pub count: ::std::os::raw::c_int,
    /// The signals
    pub definitions: *mut SignalDefinition,
}
#[test]
fn bindgen_test_layout_SignalDefinitions() {
    assert_eq!(
        ::std::mem::size_of::<SignalDefinitions>(),
        16usize,
        concat!("Size of: ", stringify!(SignalDefinitions))
    );
    assert_eq!(
        ::std::mem::align_of::<SignalDefinitions>(),
        8usize,
        concat!("Alignment of ", stringify!(SignalDefinitions))
    );
}
/// Represents a single slot definition
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SlotDefinition {
    /// The slot name
    pub name: *const ::std::os::raw::c_char,
    /// The slot return type
    pub returnMetaType: ::std::os::raw::c_int,
    /// The parameters count
    pub parametersCount: ::std::os::raw::c_int,
    /// The parameters
    pub parameters: *mut ParameterDefinition,
}
#[test]
fn bindgen_test_layout_SlotDefinition() {
    assert_eq!(
        ::std::mem::size_of::<SlotDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(SlotDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<SlotDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(SlotDefinition))
    );
}
/// Represents a set of slot definitions
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SlotDefinitions {
    /// The total number of slots
    pub count: ::std::os::raw::c_int,
    /// The slot definitions array
    pub definitions: *mut SlotDefinition,
}
#[test]
fn bindgen_test_layout_SlotDefinitions() {
    assert_eq!(
        ::std::mem::size_of::<SlotDefinitions>(),
        16usize,
        concat!("Size of: ", stringify!(SlotDefinitions))
    );
    assert_eq!(
        ::std::mem::align_of::<SlotDefinitions>(),
        8usize,
        concat!("Alignment of ", stringify!(SlotDefinitions))
    );
}
/// Represents a single property definition
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyDefinition {
    /// The property name
    pub name: *const ::std::os::raw::c_char,
    /// The property metatype
    pub propertyMetaType: ::std::os::raw::c_int,
    /// The name of the property read slot
    pub readSlot: *const ::std::os::raw::c_char,
    /// \brief The name of the property write slot
    /// /// \note Setting this to null means a readonly proeperty
    pub writeSlot: *const ::std::os::raw::c_char,
    /// \brief The name of the property notify signals
    /// /// \note Setting this to null means a constant property
    pub notifySignal: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PropertyDefinition() {
    assert_eq!(
        ::std::mem::size_of::<PropertyDefinition>(),
        40usize,
        concat!("Size of: ", stringify!(PropertyDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyDefinition))
    );
}
/// Represents a set of property definitions
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyDefinitions {
    /// The total number of properties
    pub count: ::std::os::raw::c_int,
    /// The property definitions array
    pub definitions: *mut PropertyDefinition,
}
#[test]
fn bindgen_test_layout_PropertyDefinitions() {
    assert_eq!(
        ::std::mem::size_of::<PropertyDefinitions>(),
        16usize,
        concat!("Size of: ", stringify!(PropertyDefinitions))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyDefinitions>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyDefinitions))
    );
}
/// Incapsulate all the QAbstractItemModel callbacks
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DosQAbstractItemModelCallbacks {
    pub rowCount: RowCountCallback,
    pub columnCount: ColumnCountCallback,
    pub data: DataCallback,
    pub setData: SetDataCallback,
    pub roleNames: RoleNamesCallback,
    pub flags: FlagsCallback,
    pub headerData: HeaderDataCallback,
    pub index: IndexCallback,
    pub parent: ParentCallback,
    pub hasChildren: HasChildrenCallback,
    pub canFetchMore: CanFetchMoreCallback,
    pub fetchMore: FetchMoreCallback,
}
#[test]
fn bindgen_test_layout_DosQAbstractItemModelCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<DosQAbstractItemModelCallbacks>(),
        96usize,
        concat!("Size of: ", stringify!(DosQAbstractItemModelCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<DosQAbstractItemModelCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(DosQAbstractItemModelCallbacks))
    );
}
extern "C" {
    /// \brief Return the QCore::applicationDirPath
    /// \return The QCore::applicationDirPath as a UTF-8 string
    /// \note The returned string should be deleted by the calling code by using
    /// the dos_chararray_delete() function
    #[link_name = "\u{1}_Z41dos_qcoreapplication_application_dir_path"]
    pub fn dos_qcoreapplication_application_dir_path() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Create a QGuiApplication
    /// \note The created QGuiApplication should be freed by calling dos_qguiapplication_delete()
    #[link_name = "\u{1}_Z26dos_qguiapplication_create"]
    pub fn dos_qguiapplication_create();
}
extern "C" {
    /// \brief Calls the QGuiApplication::exec() function of the current QGuiApplication
    /// \note A QGuiApplication should have been already created through dos_qguiapplication_create()
    #[link_name = "\u{1}_Z24dos_qguiapplication_exec"]
    pub fn dos_qguiapplication_exec();
}
extern "C" {
    /// \brief Calls the QGuiApplication::quit() function of the current QGuiApplication
    /// \note A QGuiApplication should have been already created through dos_qguiapplication_create()
    #[link_name = "\u{1}_Z24dos_qguiapplication_quit"]
    pub fn dos_qguiapplication_quit();
}
extern "C" {
    /// \brief Free the memory of the current QGuiApplication
    /// \note A QGuiApplication should have been already created through dos_qguiapplication_create()
    #[link_name = "\u{1}_Z26dos_qguiapplication_delete"]
    pub fn dos_qguiapplication_delete();
}
extern "C" {
    /// \brief Create a QApplication
    /// \note The created QApplication should be freed by calling dos_qapplication_delete()
    #[link_name = "\u{1}_Z23dos_qapplication_create"]
    pub fn dos_qapplication_create();
}
extern "C" {
    /// \brief Calls the QApplication::exec() function of the current QGuiApplication
    /// \note A QApplication should have been already created through dos_qapplication_create()
    #[link_name = "\u{1}_Z21dos_qapplication_exec"]
    pub fn dos_qapplication_exec();
}
extern "C" {
    /// \brief Calls the QApplication::quit() function of the current QGuiApplication
    /// \note A QApplication should have been already created through dos_qapplication_create()
    #[link_name = "\u{1}_Z21dos_qapplication_quit"]
    pub fn dos_qapplication_quit();
}
extern "C" {
    /// \brief Free the memory of the current QApplication
    /// \note A QApplication should have been already created through dos_qapplication_create()
    #[link_name = "\u{1}_Z23dos_qapplication_delete"]
    pub fn dos_qapplication_delete();
}
extern "C" {
    /// \brief Create a new QQmlApplicationEngine
    /// \return A new QQmlApplicationEngine
    /// \note The returned QQmlApplicationEngine should be freed by using dos_qqmlapplicationengine_delete(DosQQmlApplicationEngine*)
    #[link_name = "\u{1}_Z32dos_qqmlapplicationengine_create"]
    pub fn dos_qqmlapplicationengine_create() -> *mut DosQQmlApplicationEngine;
}
extern "C" {
    /// \brief Calls the QQmlApplicationEngine::load function
    /// \param vptr The QQmlApplicationEngine
    /// \param filename The file to load. The file is relative to the directory that contains the application executable
    #[link_name = "\u{1}_Z30dos_qqmlapplicationengine_load"]
    pub fn dos_qqmlapplicationengine_load(
        vptr: *mut DosQQmlApplicationEngine,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Calls the QQmlApplicationEngine::load function
    /// \param vptr The QQmlApplicationEngine
    /// \param url The QUrl of the file to load
    #[link_name = "\u{1}_Z34dos_qqmlapplicationengine_load_url"]
    pub fn dos_qqmlapplicationengine_load_url(
        vptr: *mut DosQQmlApplicationEngine,
        url: *mut DosQUrl,
    );
}
extern "C" {
    /// \brief Calls the QQmlApplicationEngine::loadData function
    /// \param vptr The QQmlApplicationEngine
    /// \param data The UTF-8 string of the QML to load
    #[link_name = "\u{1}_Z35dos_qqmlapplicationengine_load_data"]
    pub fn dos_qqmlapplicationengine_load_data(
        vptr: *mut DosQQmlApplicationEngine,
        data: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Calls the QQmlApplicationEngine::addImportPath function
    /// \param vptr The QQmlApplicationEngine
    /// \param path The path to be added to the list of import paths
    #[link_name = "\u{1}_Z41dos_qqmlapplicationengine_add_import_path"]
    pub fn dos_qqmlapplicationengine_add_import_path(
        vptr: *mut DosQQmlApplicationEngine,
        path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Calls the QQmlApplicationEngine::context
    /// \param vptr The QQmlApplicationEngine
    /// \return A pointer to a QQmlContext. This should not be stored nor made available to the binded language if
    /// you can't guarantee that this QQmlContext should not live more that its Engine. This context is owned by
    /// the engine and so it should die with the engine.
    #[link_name = "\u{1}_Z33dos_qqmlapplicationengine_context"]
    pub fn dos_qqmlapplicationengine_context(
        vptr: *mut DosQQmlApplicationEngine,
    ) -> *mut DosQQmlContext;
}
extern "C" {
    /// \brief Calls the QQMLApplicationengine::addImageProvider
    /// \param vptr The QQmlApplicationEngine
    /// \param vptr_i A QQuickImageProvider, the QQmlApplicationEngine takes ownership of this pointer
    #[link_name = "\u{1}_Z42dos_qqmlapplicationengine_addImageProvider"]
    pub fn dos_qqmlapplicationengine_addImageProvider(
        vptr: *mut DosQQmlApplicationEngine,
        name: *const ::std::os::raw::c_char,
        vptr_i: *mut DosQQuickImageProvider,
    );
}
extern "C" {
    /// \brief Free the memory allocated for the given QQmlApplicationEngine
    /// \param vptr The QQmlApplicationEngine
    #[link_name = "\u{1}_Z32dos_qqmlapplicationengine_delete"]
    pub fn dos_qqmlapplicationengine_delete(vptr: *mut DosQQmlApplicationEngine);
}
extern "C" {
    /// \brief Create a new QQuickImageProvider
    /// \return A new QQuickImageProvider
    /// \note The returned QQuickImageProvider should be freed by using dos_qquickimageprovider_delete(DosQQuickImageProvider*) unless the QQuickImageProvider has been bound to a QQmlApplicationEngine
    #[link_name = "\u{1}_Z30dos_qquickimageprovider_create"]
    pub fn dos_qquickimageprovider_create(
        callback: RequestPixmapCallback,
    ) -> *mut DosQQuickImageProvider;
}
extern "C" {
    /// \breif Frees a QQuickImageProvider
    #[link_name = "\u{1}_Z30dos_qquickimageprovider_delete"]
    pub fn dos_qquickimageprovider_delete(vptr: *mut DosQQuickImageProvider);
}
extern "C" {
    /// \brief Creates a null QPixmap
    #[link_name = "\u{1}_Z18dos_qpixmap_create"]
    pub fn dos_qpixmap_create() -> *mut DosPixmap;
}
extern "C" {
    /// \brief Creates a QPixmap copied from another
    #[link_name = "\u{1}_Z26dos_qpixmap_create_qpixmap"]
    pub fn dos_qpixmap_create_qpixmap(other: *const DosPixmap) -> *mut DosPixmap;
}
extern "C" {
    /// \brief Create a new QPixmap
    #[link_name = "\u{1}_Z35dos_qpixmap_create_width_and_height"]
    pub fn dos_qpixmap_create_width_and_height(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DosPixmap;
}
extern "C" {
    /// \brief Frees a QPixmap
    #[link_name = "\u{1}_Z18dos_qpixmap_delete"]
    pub fn dos_qpixmap_delete(vptr: *mut DosPixmap);
}
extern "C" {
    /// \brief Load image data into a QPixmap from an image file
    #[link_name = "\u{1}_Z16dos_qpixmap_load"]
    pub fn dos_qpixmap_load(
        vptr: *mut DosPixmap,
        filepath: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Load image data into a QPixmap from a buffer
    #[link_name = "\u{1}_Z24dos_qpixmap_loadFromData"]
    pub fn dos_qpixmap_loadFromData(
        vptr: *mut DosPixmap,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    /// \brief Fill a QPixmap with a single color
    #[link_name = "\u{1}_Z16dos_qpixmap_fill"]
    pub fn dos_qpixmap_fill(
        vptr: *mut DosPixmap,
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
        a: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    /// \brief Calls the QPixmap::operator=(const QPixmap&) function
    /// \param vptr The left hand side QPixmap
    /// \param other The right hand side QPixmap
    #[link_name = "\u{1}_Z18dos_qpixmap_assign"]
    pub fn dos_qpixmap_assign(vptr: *mut DosPixmap, other: *const DosPixmap);
}
extern "C" {
    /// \brief Calls the QPixmap::isNull
    /// \return True if the QPixmap is null, false otherwise
    #[link_name = "\u{1}_Z18dos_qpixmap_isNull"]
    pub fn dos_qpixmap_isNull(vptr: *mut DosPixmap) -> bool;
}
extern "C" {
    /// \brief Set the QtQuickControls2 style
    #[link_name = "\u{1}_Z25dos_qquickstyle_set_style"]
    pub fn dos_qquickstyle_set_style(style: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Set the QtQuickControls2 fallback style
    #[link_name = "\u{1}_Z34dos_qquickstyle_set_fallback_style"]
    pub fn dos_qquickstyle_set_fallback_style(style: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Create a new QQuickView
    /// \return A new QQuickView
    /// \note The returned QQuickView should be freed by using dos_qquickview_delete(DosQQuickview*)
    #[link_name = "\u{1}_Z21dos_qquickview_create"]
    pub fn dos_qquickview_create() -> *mut DosQQuickView;
}
extern "C" {
    /// \brief Calls the QQuickView::show() function
    /// \param vptr The QQuickView
    #[link_name = "\u{1}_Z19dos_qquickview_show"]
    pub fn dos_qquickview_show(vptr: *mut DosQQuickView);
}
extern "C" {
    /// \brief Calls the QQuickView::source() function
    /// \param vptr The QQuickView
    /// \return The QQuickView source as an UTF-8 string
    /// \note The returned string should be freed by using the dos_chararray_delete() function
    #[link_name = "\u{1}_Z21dos_qquickview_source"]
    pub fn dos_qquickview_source(vptr: *const DosQQuickView) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Calls the QQuickView::setSource() function
    /// \param vptr The QQuickView
    /// \param url The source QUrl
    #[link_name = "\u{1}_Z29dos_qquickview_set_source_url"]
    pub fn dos_qquickview_set_source_url(vptr: *mut DosQQuickView, url: *mut DosQUrl);
}
extern "C" {
    /// \brief Calls the QQuickView::setSource() function
    /// \param vptr The QQuickView
    /// \param filename The source path as an UTF-8 string. The path is relative to the directory
    /// that contains the application executable
    #[link_name = "\u{1}_Z25dos_qquickview_set_source"]
    pub fn dos_qquickview_set_source(
        vptr: *mut DosQQuickView,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Calls the QQuickView::setResizeMode() function
    /// \param vptr The QQuickView
    /// \param resizeMode The resize mode
    #[link_name = "\u{1}_Z30dos_qquickview_set_resize_mode"]
    pub fn dos_qquickview_set_resize_mode(
        vptr: *mut DosQQuickView,
        resizeMode: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Free the memory allocated for the given QQuickView
    /// \param vptr The QQuickView
    #[link_name = "\u{1}_Z21dos_qquickview_delete"]
    pub fn dos_qquickview_delete(vptr: *mut DosQQuickView);
}
extern "C" {
    /// \brief Return the QQuickView::rootContext() as a QQuickContext
    /// \param vptr The QQuickView
    #[link_name = "\u{1}_Z26dos_qquickview_rootContext"]
    pub fn dos_qquickview_rootContext(vptr: *mut DosQQuickView) -> *mut DosQQmlContext;
}
extern "C" {
    /// \brief Calls the QQmlContext::baseUrl function
    /// \return The QQmlContext url as an UTF-8 string
    /// \note The returned string should be freed using with the dos_chararray_delete() function
    #[link_name = "\u{1}_Z23dos_qqmlcontext_baseUrl"]
    pub fn dos_qqmlcontext_baseUrl(vptr: *const DosQQmlContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Sets a property inside the context
    /// \param vptr The DosQQmlContext
    /// \param name The property name. The string is owned by the caller thus it will not be deleted by the library
    /// \param value The property value. The DosQVariant is owned by the caller thus it will not be deleted by the library
    #[link_name = "\u{1}_Z34dos_qqmlcontext_setcontextproperty"]
    pub fn dos_qqmlcontext_setcontextproperty(
        vptr: *mut DosQQmlContext,
        name: *const ::std::os::raw::c_char,
        value: *mut DosQVariant,
    );
}
extern "C" {
    /// \brief Free the memory allocated for the given UTF-8 string
    /// \param ptr The UTF-8 string to be freed
    #[link_name = "\u{1}_Z20dos_chararray_delete"]
    pub fn dos_chararray_delete(ptr: *mut ::std::os::raw::c_char);
}
extern "C" {
    /// Delete a DosQVariantArray
    #[link_name = "\u{1}_Z24dos_qvariantarray_delete"]
    pub fn dos_qvariantarray_delete(ptr: *mut DosQVariantArray);
}
extern "C" {
    /// \brief Create a new QVariant (null)
    /// \return The a new QVariant
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z19dos_qvariant_create"]
    pub fn dos_qvariant_create() -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding an int value
    /// \return The a new QVariant
    /// \param value The int value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z23dos_qvariant_create_int"]
    pub fn dos_qvariant_create_int(value: ::std::os::raw::c_int) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a bool value
    /// \return The a new QVariant
    /// \param value The bool value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z24dos_qvariant_create_bool"]
    pub fn dos_qvariant_create_bool(value: bool) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a string value
    /// \return The a new QVariant
    /// \param value The string value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    /// \note The given string is copied inside the QVariant and will not be deleted
    #[link_name = "\u{1}_Z26dos_qvariant_create_string"]
    pub fn dos_qvariant_create_string(value: *const ::std::os::raw::c_char) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a QObject value
    /// \return The a new QVariant
    /// \param value The QObject value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z27dos_qvariant_create_qobject"]
    pub fn dos_qvariant_create_qobject(value: *mut DosQObject) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant with the same value of the one given as argument
    /// \return The a new QVariant
    /// \param value The QVariant to which copy its value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z28dos_qvariant_create_qvariant"]
    pub fn dos_qvariant_create_qvariant(value: *const DosQVariant) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a float value
    /// \return The a new QVariant
    /// \param value The float value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z25dos_qvariant_create_float"]
    pub fn dos_qvariant_create_float(value: f32) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a double value
    /// \return The a new QVariant
    /// \param value The double value
    /// \note The returned QVariant should be freed using dos_qvariant_delete()
    #[link_name = "\u{1}_Z26dos_qvariant_create_double"]
    pub fn dos_qvariant_create_double(value: f64) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Create a new QVariant holding a QVariantList
    /// \return A new QVariant
    /// \param size The size of the QVariant array
    /// \param array The array of QVariant that will be inserted in the inner QVariantList
    /// \note The \p array is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z25dos_qvariant_create_array"]
    pub fn dos_qvariant_create_array(
        size: ::std::os::raw::c_int,
        array: *mut *mut DosQVariant,
    ) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Calls the QVariant::setValue<int>() function
    /// \param vptr The QVariant
    /// \param value The int value
    #[link_name = "\u{1}_Z19dos_qvariant_setInt"]
    pub fn dos_qvariant_setInt(vptr: *mut DosQVariant, value: ::std::os::raw::c_int);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<bool>() function
    /// \param vptr The QVariant
    /// \param value The bool value
    #[link_name = "\u{1}_Z20dos_qvariant_setBool"]
    pub fn dos_qvariant_setBool(vptr: *mut DosQVariant, value: bool);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<float>() function
    /// \param vptr The QVariant
    /// \param value The float value
    #[link_name = "\u{1}_Z21dos_qvariant_setFloat"]
    pub fn dos_qvariant_setFloat(vptr: *mut DosQVariant, value: f32);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<double>() function
    /// \param vptr The QVariant
    /// \param value The double value
    #[link_name = "\u{1}_Z22dos_qvariant_setDouble"]
    pub fn dos_qvariant_setDouble(vptr: *mut DosQVariant, value: f64);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<QString>() function
    /// \param vptr The QVariant
    /// \param value The string value
    /// \note The string argument is copied inside the QVariant and it will not be deleted
    #[link_name = "\u{1}_Z22dos_qvariant_setString"]
    pub fn dos_qvariant_setString(vptr: *mut DosQVariant, value: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<QObject*>() function
    /// \param vptr The QVariant
    /// \param value The string value
    /// \note The string argument is copied inside the QVariant and it will not be deleted
    #[link_name = "\u{1}_Z23dos_qvariant_setQObject"]
    pub fn dos_qvariant_setQObject(vptr: *mut DosQVariant, value: *mut DosQObject);
}
extern "C" {
    /// \brief Calls the QVariant::setValue<QVariantList>() function
    /// \param vptr The QVariant
    /// \param size The size of the \p array
    /// \param array The array of QVariant use for setting the inner QVariantList
    #[link_name = "\u{1}_Z21dos_qvariant_setArray"]
    pub fn dos_qvariant_setArray(
        vptr: *mut DosQVariant,
        size: ::std::os::raw::c_int,
        array: *mut *mut DosQVariant,
    );
}
extern "C" {
    /// \brief Calls the QVariant::isNull function
    /// \return True if the QVariant is null, false otherwise
    /// \param vptr The QVariant
    #[link_name = "\u{1}_Z19dos_qvariant_isnull"]
    pub fn dos_qvariant_isnull(vptr: *const DosQVariant) -> bool;
}
extern "C" {
    /// \brief Free the memory allocated for the given QVariant
    /// \param vptr The QVariant
    #[link_name = "\u{1}_Z19dos_qvariant_delete"]
    pub fn dos_qvariant_delete(vptr: *mut DosQVariant);
}
extern "C" {
    /// \brief Calls the QVariant::operator=(const QVariant&) function
    /// \param vptr The QVariant (left side)
    /// \param other The QVariant (right side)
    #[link_name = "\u{1}_Z19dos_qvariant_assign"]
    pub fn dos_qvariant_assign(vptr: *mut DosQVariant, other: *const DosQVariant);
}
extern "C" {
    /// \brief Calls the QVariant::value<int>() function
    /// \param vptr The QVariant
    /// \return The int value
    #[link_name = "\u{1}_Z18dos_qvariant_toInt"]
    pub fn dos_qvariant_toInt(vptr: *const DosQVariant) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Calls the QVariant::value<bool>() function
    /// \param vptr The QVariant
    /// \return The bool value
    #[link_name = "\u{1}_Z19dos_qvariant_toBool"]
    pub fn dos_qvariant_toBool(vptr: *const DosQVariant) -> bool;
}
extern "C" {
    /// \brief Calls the QVariant::value<QString>() function
    /// \param vptr The QVariant
    /// \return The string value
    /// \note The returned string should be freed by using dos_chararray_delete()
    #[link_name = "\u{1}_Z21dos_qvariant_toString"]
    pub fn dos_qvariant_toString(vptr: *const DosQVariant) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Calls the QVariant::value<float>() function
    /// \param vptr The QVariant
    /// \return The float value
    #[link_name = "\u{1}_Z20dos_qvariant_toFloat"]
    pub fn dos_qvariant_toFloat(vptr: *const DosQVariant) -> f32;
}
extern "C" {
    /// \brief Calls the QVariant::value<double>() function
    /// \param vptr The QVariant
    /// \return The double value
    #[link_name = "\u{1}_Z21dos_qvariant_toDouble"]
    pub fn dos_qvariant_toDouble(vptr: *const DosQVariant) -> f64;
}
extern "C" {
    /// \brief Calls the QVariant::value<QVariantList>() function
    /// \param vptr The QVariant
    /// \return The QVariantList value as an array
    #[link_name = "\u{1}_Z20dos_qvariant_toArray"]
    pub fn dos_qvariant_toArray(vptr: *const DosQVariant) -> *mut DosQVariantArray;
}
extern "C" {
    /// \brief Calls the QVariant::value<QObject*>() function
    /// \param vptr The QVariant
    /// \return The QObject* value
    /// \note Storing the returned QObject* is higly dengerous and depends on how you managed the memory
    /// of QObjects in the binded language
    #[link_name = "\u{1}_Z22dos_qvariant_toQObject"]
    pub fn dos_qvariant_toQObject(vptr: *const DosQVariant) -> *mut DosQObject;
}
extern "C" {
    /// \brief Create a new QMetaObject
    /// \param superClassMetaObject The superclass metaobject
    /// \param className The class name
    /// \param signalDefinitions The SignalDefinitions
    /// \param slotDefinitions The SlotDefinitions struct
    /// \param propertyDefinitions The PropertyDefinitions struct
    /// \note The returned QMetaObject should be freed using dos_qmetaobject_delete().
    /// \attention The QMetaObject should live more than the QObject it refears to.
    /// Depending on the implementation usually the QMetaObject should be modeled as static variable
    /// So with a lifetime equals to the entire application
    #[link_name = "\u{1}_Z22dos_qmetaobject_create"]
    pub fn dos_qmetaobject_create(
        superClassMetaObject: *mut DosQMetaObject,
        className: *const ::std::os::raw::c_char,
        signalDefinitions: *const SignalDefinitions,
        slotDefinitions: *const SlotDefinitions,
        propertyDefinitions: *const PropertyDefinitions,
    ) -> *mut DosQMetaObject;
}
extern "C" {
    /// \brief Free the memory allocated for the given QMetaObject
    /// \param vptr The QMetaObject
    #[link_name = "\u{1}_Z22dos_qmetaobject_delete"]
    pub fn dos_qmetaobject_delete(vptr: *mut DosQMetaObject);
}
extern "C" {
    /// \brief Return QMetaObject associated to the QAbstractListModel class
    /// \return The QMetaObject of the QAbstractListModel class
    /// \note The returned QMetaObject should be freed using dos_qmetaobject_delete().
    #[link_name = "\u{1}_Z34dos_qabstractlistmodel_qmetaobject"]
    pub fn dos_qabstractlistmodel_qmetaobject() -> *mut DosQMetaObject;
}
extern "C" {
    /// \brief Create a new QAbstractListModel
    /// \param callbackObject The pointer of QAbstractListModel in the binded language
    /// \param metaObject The QMetaObject for this QAbstractListModel
    /// \param dObjectCallback The callback for handling the properties read/write and slots execution
    /// \param callbacks The QAbstractItemModel callbacks
    #[link_name = "\u{1}_Z29dos_qabstractlistmodel_create"]
    pub fn dos_qabstractlistmodel_create(
        callbackObject: *mut ::std::os::raw::c_void,
        metaObject: *mut DosQMetaObject,
        dObjectCallback: DObjectCallback,
        callbacks: *mut DosQAbstractItemModelCallbacks,
    ) -> *mut DosQAbstractListModel;
}
extern "C" {
    /// \brief Calls the default QAbstractListModel::index() function
    #[link_name = "\u{1}_Z28dos_qabstractlistmodel_index"]
    pub fn dos_qabstractlistmodel_index(
        vptr: *mut DosQAbstractListModel,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
        parent: *mut DosQModelIndex,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the default QAbstractListModel::parent() function
    #[link_name = "\u{1}_Z29dos_qabstractlistmodel_parent"]
    pub fn dos_qabstractlistmodel_parent(
        vptr: *mut DosQAbstractListModel,
        child: *mut DosQModelIndex,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the default QAbstractListModel::columnCount() function
    #[link_name = "\u{1}_Z34dos_qabstractlistmodel_columnCount"]
    pub fn dos_qabstractlistmodel_columnCount(
        vptr: *mut DosQAbstractListModel,
        parent: *mut DosQModelIndex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return QMetaObject associated to the QAbstractTableModel class
    /// \return The QMetaObject of the QAbstractTableModel class
    /// \note The returned QMetaObject should be freed using dos_qmetaobject_delete().
    #[link_name = "\u{1}_Z35dos_qabstracttablemodel_qmetaobject"]
    pub fn dos_qabstracttablemodel_qmetaobject() -> *mut DosQMetaObject;
}
extern "C" {
    /// \brief Create a new QAbstractTableModel
    /// \param callbackObject The pointer of QAbstractTableModel in the binded language
    /// \param metaObject The QMetaObject for this QAbstractTableModel
    /// \param dObjectCallback The callback for handling the properties read/write and slots execution
    /// \param callbacks The QAbstractItemModel callbacks
    #[link_name = "\u{1}_Z30dos_qabstracttablemodel_create"]
    pub fn dos_qabstracttablemodel_create(
        callbackObject: *mut ::std::os::raw::c_void,
        metaObject: *mut DosQMetaObject,
        dObjectCallback: DObjectCallback,
        callbacks: *mut DosQAbstractItemModelCallbacks,
    ) -> *mut DosQAbstractTableModel;
}
extern "C" {
    /// \brief Calls the default QAbstractTableModel::index() function
    #[link_name = "\u{1}_Z29dos_qabstracttablemodel_index"]
    pub fn dos_qabstracttablemodel_index(
        vptr: *mut DosQAbstractTableModel,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
        parent: *mut DosQModelIndex,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the default QAbstractTableModel::parent() function
    #[link_name = "\u{1}_Z30dos_qabstracttablemodel_parent"]
    pub fn dos_qabstracttablemodel_parent(
        vptr: *mut DosQAbstractTableModel,
        child: *mut DosQModelIndex,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Return QMetaObject associated to the QAbstractItemModel class
    /// \return The QMetaObject of the QAbstractItemModel class
    /// \note The returned QMetaObject should be freed using dos_qmetaobject_delete().
    #[link_name = "\u{1}_Z34dos_qabstractitemmodel_qmetaobject"]
    pub fn dos_qabstractitemmodel_qmetaobject() -> *mut DosQMetaObject;
}
extern "C" {
    /// \brief Create a new QAbstractItemModel
    /// \param callbackObject The pointer of QAbstractItemModel in the binded language
    /// \param metaObject The QMetaObject for this QAbstractItemModel
    /// \param dObjectCallback The callback for handling the properties read/write and slots execution
    /// \param callbacks The QAbstractItemModel callbacks
    /// \note The callbacks struct is copied so you can freely delete after calling this function
    #[link_name = "\u{1}_Z29dos_qabstractitemmodel_create"]
    pub fn dos_qabstractitemmodel_create(
        callbackObject: *mut ::std::os::raw::c_void,
        metaObject: *mut DosQMetaObject,
        dObjectCallback: DObjectCallback,
        callbacks: *mut DosQAbstractItemModelCallbacks,
    ) -> *mut DosQAbstractItemModel;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::setData function
    #[link_name = "\u{1}_Z30dos_qabstractitemmodel_setData"]
    pub fn dos_qabstractitemmodel_setData(
        vptr: *mut DosQAbstractItemModel,
        index: *mut DosQModelIndex,
        data: *mut DosQVariant,
        role: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::roleNames function
    #[link_name = "\u{1}_Z32dos_qabstractitemmodel_roleNames"]
    pub fn dos_qabstractitemmodel_roleNames(
        vptr: *mut DosQAbstractItemModel,
    ) -> *mut DosQHashIntQByteArray;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::flags function
    #[link_name = "\u{1}_Z28dos_qabstractitemmodel_flags"]
    pub fn dos_qabstractitemmodel_flags(
        vptr: *mut DosQAbstractItemModel,
        index: *mut DosQModelIndex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::headerData function
    #[link_name = "\u{1}_Z33dos_qabstractitemmodel_headerData"]
    pub fn dos_qabstractitemmodel_headerData(
        vptr: *mut DosQAbstractItemModel,
        section: ::std::os::raw::c_int,
        orientation: ::std::os::raw::c_int,
        role: ::std::os::raw::c_int,
    ) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::hasChildren function
    #[link_name = "\u{1}_Z34dos_qabstractitemmodel_hasChildren"]
    pub fn dos_qabstractitemmodel_hasChildren(
        vptr: *mut DosQAbstractItemModel,
        parentIndex: *mut DosQModelIndex,
    ) -> bool;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::hasIndex function
    #[link_name = "\u{1}_Z31dos_qabstractitemmodel_hasIndex"]
    pub fn dos_qabstractitemmodel_hasIndex(
        vptr: *mut DosQAbstractItemModel,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
        dosParentIndex: *mut DosQModelIndex,
    ) -> bool;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::canFetchMore function
    #[link_name = "\u{1}_Z35dos_qabstractitemmodel_canFetchMore"]
    pub fn dos_qabstractitemmodel_canFetchMore(
        vptr: *mut DosQAbstractItemModel,
        parentIndex: *mut DosQModelIndex,
    ) -> bool;
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::fetchMore function
    #[link_name = "\u{1}_Z32dos_qabstractitemmodel_fetchMore"]
    pub fn dos_qabstractitemmodel_fetchMore(
        vptr: *mut DosQAbstractItemModel,
        parentIndex: *mut DosQModelIndex,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::beginInsertRows() function
    /// \param vptr The QAbstractItemModel
    /// \param parent The parent QModelIndex
    /// \param first The first row in the range
    /// \param last The last row in the range
    /// \note The \p parent QModelIndex is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z38dos_qabstractitemmodel_beginInsertRows"]
    pub fn dos_qabstractitemmodel_beginInsertRows(
        vptr: *mut DosQAbstractItemModel,
        parent: *mut DosQModelIndex,
        first: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::endInsertRows() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z36dos_qabstractitemmodel_endInsertRows"]
    pub fn dos_qabstractitemmodel_endInsertRows(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::beginRemovetRows() function
    /// \param vptr The QAbstractItemModel
    /// \param parent The parent QModelIndex
    /// \param first The first column in the range
    /// \param last The last column in the range
    /// \note The \p parent QModelIndex is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z38dos_qabstractitemmodel_beginRemoveRows"]
    pub fn dos_qabstractitemmodel_beginRemoveRows(
        vptr: *mut DosQAbstractItemModel,
        parent: *mut DosQModelIndex,
        first: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::endRemoveRows() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z36dos_qabstractitemmodel_endRemoveRows"]
    pub fn dos_qabstractitemmodel_endRemoveRows(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::beginInsertColumns() function
    /// \param vptr The QAbstractItemModel
    /// \param parent The parent QModelIndex
    /// \param first The first column in the range
    /// \param last The last column in the range
    /// \note The \p parent QModelIndex is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z41dos_qabstractitemmodel_beginInsertColumns"]
    pub fn dos_qabstractitemmodel_beginInsertColumns(
        vptr: *mut DosQAbstractItemModel,
        parent: *mut DosQModelIndex,
        first: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::endInsertColumns() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z39dos_qabstractitemmodel_endInsertColumns"]
    pub fn dos_qabstractitemmodel_endInsertColumns(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::beginRemovetColumns() function
    /// \param vptr The QAbstractItemModel
    /// \param parent The parent QModelIndex
    /// \param first The first column in the range
    /// \param last The last column in the range
    /// \note The \p parent QModelIndex is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z41dos_qabstractitemmodel_beginRemoveColumns"]
    pub fn dos_qabstractitemmodel_beginRemoveColumns(
        vptr: *mut DosQAbstractItemModel,
        parent: *mut DosQModelIndex,
        first: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::endRemoveColumns() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z39dos_qabstractitemmodel_endRemoveColumns"]
    pub fn dos_qabstractitemmodel_endRemoveColumns(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::beginResetModel() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z38dos_qabstractitemmodel_beginResetModel"]
    pub fn dos_qabstractitemmodel_beginResetModel(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::endResetModel() function
    /// \param vptr The QAbstractItemModel
    #[link_name = "\u{1}_Z36dos_qabstractitemmodel_endResetModel"]
    pub fn dos_qabstractitemmodel_endResetModel(vptr: *mut DosQAbstractItemModel);
}
extern "C" {
    /// \brief Emit the dataChanged signal
    /// \param vptr The DosQAbstractItemModel pointer
    /// \param topLeft The topLeft DosQModelIndex
    /// \param bottomRight The bottomright DosQModelIndex
    /// \param rolesPtr The roles array
    /// \param rolesLength The roles array length
    /// \note The \p topLeft, \p bottomRight and \p rolesPtr arguments are owned by the caller thus they will not be deleted
    #[link_name = "\u{1}_Z34dos_qabstractitemmodel_dataChanged"]
    pub fn dos_qabstractitemmodel_dataChanged(
        vptr: *mut DosQAbstractItemModel,
        topLeft: *const DosQModelIndex,
        bottomRight: *const DosQModelIndex,
        rolesPtr: *mut ::std::os::raw::c_int,
        rolesLength: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief Calls the QAbstractItemModel::createIndex() function
    #[link_name = "\u{1}_Z34dos_qabstractitemmodel_createIndex"]
    pub fn dos_qabstractitemmodel_createIndex(
        vptr: *mut DosQAbstractItemModel,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Return QMetaObject associated to the QObject class
    /// \return The QMetaObject of the QObject class
    /// \note The returned QObject should be freed using dos_qmetaobject_delete().
    #[link_name = "\u{1}_Z23dos_qobject_qmetaobject"]
    pub fn dos_qobject_qmetaobject() -> *mut DosQMetaObject;
}
extern "C" {
    /// \brief Create a new QObject
    /// \param dObjectPointer The pointer of the QObject in the binded language
    /// \param metaObject The QMetaObject associated to the given QObject
    /// \param dObjectCallback The callback called from QML whenever a slot or property
    /// should be in read, write or invoked
    /// \return A new QObject
    /// \note The returned QObject should be freed by calling dos_qobject_delete()
    /// \note The \p dObjectPointer is usefull for forwarding a property read/slot to the correct
    /// object in the binded language in the callback
    #[link_name = "\u{1}_Z18dos_qobject_create"]
    pub fn dos_qobject_create(
        dObjectPointer: *mut ::std::os::raw::c_void,
        metaObject: *mut DosQMetaObject,
        dObjectCallback: DObjectCallback,
    ) -> *mut DosQObject;
}
extern "C" {
    /// \brief Emit a signal definited in a QObject
    /// \param vptr The QObject
    /// \param name The signal name
    /// \param parametersCount The number of parameters in the \p parameters array
    /// \param parameters An array of DosQVariant with the values of signal arguments
    #[link_name = "\u{1}_Z23dos_qobject_signal_emit"]
    pub fn dos_qobject_signal_emit(
        vptr: *mut DosQObject,
        name: *const ::std::os::raw::c_char,
        parametersCount: ::std::os::raw::c_int,
        parameters: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z26dos_qobject_signal_connect"]
    pub fn dos_qobject_signal_connect(
        senderVPtr: *mut DosQObject,
        signal: *const ::std::os::raw::c_char,
        receiverVPtr: *mut DosQObject,
        method: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z29dos_qobject_signal_disconnect"]
    pub fn dos_qobject_signal_disconnect(
        senderVPtr: *mut DosQObject,
        signal: *const ::std::os::raw::c_char,
        receiverVPtr: *mut DosQObject,
        method: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    /// \brief Return the DosQObject objectName
    /// \param vptr The DosQObject pointer
    /// \return A string in UTF8 format
    /// \note The returned string should be freed using the dos_chararray_delete() function
    #[link_name = "\u{1}_Z22dos_qobject_objectName"]
    pub fn dos_qobject_objectName(vptr: *const DosQObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Calls the QObject::setObjectName() function
    /// \param vptr The QObject
    /// \param name A pointer to an UTF-8 string
    /// \note The \p name string is owned by the caller thus it will not be deleted
    #[link_name = "\u{1}_Z25dos_qobject_setObjectName"]
    pub fn dos_qobject_setObjectName(vptr: *mut DosQObject, name: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Free the memory allocated for the QObject
    /// \param vptr The QObject
    #[link_name = "\u{1}_Z18dos_qobject_delete"]
    pub fn dos_qobject_delete(vptr: *mut DosQObject);
}
extern "C" {
    /// \brief Create a new QModelIndex()
    /// \note The returned QModelIndex should be freed by calling the dos_qmodelindex_delete() function
    #[link_name = "\u{1}_Z22dos_qmodelindex_create"]
    pub fn dos_qmodelindex_create() -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Create a new QModelIndex() copy constructed with given index
    /// \note The returned QModelIndex should be freed by calling the dos_qmodelindex_delete() function
    #[link_name = "\u{1}_Z34dos_qmodelindex_create_qmodelindex"]
    pub fn dos_qmodelindex_create_qmodelindex(index: *mut DosQModelIndex) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Free the memory allocated for the QModelIndex
    /// \param vptr The QModelIndex
    #[link_name = "\u{1}_Z22dos_qmodelindex_delete"]
    pub fn dos_qmodelindex_delete(vptr: *mut DosQModelIndex);
}
extern "C" {
    /// \brief Calls the QModelIndex::row() function
    /// \param vptr The QModelIndex
    /// \return The QModelIndex row
    #[link_name = "\u{1}_Z19dos_qmodelindex_row"]
    pub fn dos_qmodelindex_row(vptr: *const DosQModelIndex) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Calls the QModelIndex::column() function
    /// \param vptr The QModelIndex
    /// \return The QModelIndex column
    #[link_name = "\u{1}_Z22dos_qmodelindex_column"]
    pub fn dos_qmodelindex_column(vptr: *const DosQModelIndex) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Calls the QModelIndex::isvalid() function
    /// \param vptr The QModelIndex
    /// \return True if the QModelIndex is valid, false otherwise
    #[link_name = "\u{1}_Z23dos_qmodelindex_isValid"]
    pub fn dos_qmodelindex_isValid(vptr: *const DosQModelIndex) -> bool;
}
extern "C" {
    /// \brief Calls the QModelIndex::data() function
    /// \param vptr The QModelIndex
    /// \param role The model role to which we want the data
    /// \return The QVariant associated at the given role
    /// \note The returned QVariant should be freed by calling the dos_qvariant_delete() function
    #[link_name = "\u{1}_Z20dos_qmodelindex_data"]
    pub fn dos_qmodelindex_data(
        vptr: *const DosQModelIndex,
        role: ::std::os::raw::c_int,
    ) -> *mut DosQVariant;
}
extern "C" {
    /// \brief Calls the QModelIndex::parent() function
    /// \param vptr The QModelIndex
    /// \return The model parent QModelIndex
    /// \note The returned QModelIndex should be freed by calling the dos_qmodelindex_delete() function
    #[link_name = "\u{1}_Z22dos_qmodelindex_parent"]
    pub fn dos_qmodelindex_parent(vptr: *const DosQModelIndex) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the QModelIndex::child() function
    /// \param vptr The QModelIndex
    /// \param row The child row
    /// \param column The child column
    /// \return The model child QModelIndex at the given \p row and \p column
    /// \note The returned QModelIndex should be freed by calling the dos_qmodelindex_delete() function
    #[link_name = "\u{1}_Z21dos_qmodelindex_child"]
    pub fn dos_qmodelindex_child(
        vptr: *const DosQModelIndex,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the QModelIndex::sibling() function
    /// \param vptr The QModelIndex
    /// \param row The sibling row
    /// \param column The sibling column
    /// \return The model sibling QModelIndex at the given \p row and \p column
    /// \note The returned QModelIndex should be freed by calling the dos_qmodelindex_delete() function
    #[link_name = "\u{1}_Z23dos_qmodelindex_sibling"]
    pub fn dos_qmodelindex_sibling(
        vptr: *const DosQModelIndex,
        row: ::std::os::raw::c_int,
        column: ::std::os::raw::c_int,
    ) -> *mut DosQModelIndex;
}
extern "C" {
    /// \brief Calls the QModelIndex::operator=(const QModelIndex&) function
    /// \param l The left side QModelIndex
    /// \param r The right side QModelIndex
    #[link_name = "\u{1}_Z22dos_qmodelindex_assign"]
    pub fn dos_qmodelindex_assign(l: *mut DosQModelIndex, r: *const DosQModelIndex);
}
extern "C" {
    /// \brief Calls the QModelIndex::internalPointer function
    /// \param vptr The QModelIndex
    /// \return The internal pointer
    #[link_name = "\u{1}_Z31dos_qmodelindex_internalPointer"]
    pub fn dos_qmodelindex_internalPointer(
        vptr: *mut DosQModelIndex,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// \brief Create a new QHash<int, QByteArray>
    /// \return A new QHash<int, QByteArray>
    /// \note The retuned QHash<int, QByteArray> should be freed using
    /// the dos_qhash_int_qbytearray_delete(DosQHashIntQByteArray *) function
    #[link_name = "\u{1}_Z31dos_qhash_int_qbytearray_create"]
    pub fn dos_qhash_int_qbytearray_create() -> *mut DosQHashIntQByteArray;
}
extern "C" {
    /// \brief Free the memory allocated for the QHash<int, QByteArray>
    /// \param vptr The QHash<int, QByteArray>
    #[link_name = "\u{1}_Z31dos_qhash_int_qbytearray_delete"]
    pub fn dos_qhash_int_qbytearray_delete(vptr: *mut DosQHashIntQByteArray);
}
extern "C" {
    /// \brief Calls the QHash<int, QByteArray>::insert() function
    /// \param vptr The QHash<int, QByteArray>
    /// \param key The key
    /// \param value The UTF-8 string
    /// \note The \p value string is owned by the caller thus it will not be freed
    #[link_name = "\u{1}_Z31dos_qhash_int_qbytearray_insert"]
    pub fn dos_qhash_int_qbytearray_insert(
        vptr: *mut DosQHashIntQByteArray,
        key: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Calls the QHash<int, QByteArray>::value() function
    /// \param vptr The QHash<int, QByteArray>
    /// \param key The key to which retrive the value
    /// \return The UTF-8 string associated to the given value
    /// \note The returned string should be freed by calling the dos_chararray_delete() function
    #[link_name = "\u{1}_Z30dos_qhash_int_qbytearray_value"]
    pub fn dos_qhash_int_qbytearray_value(
        vptr: *const DosQHashIntQByteArray,
        key: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Register the given .rcc (compiled) file in the resource system
    #[link_name = "\u{1}_Z22dos_qresource_register"]
    pub fn dos_qresource_register(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Create a new QUrl
    /// \param url The UTF-8 string that represents an url
    /// \param parsingMode The parsing mode
    /// \note The retuned QUrl should be freed using the dos_qurl_delete() function
    #[link_name = "\u{1}_Z15dos_qurl_create"]
    pub fn dos_qurl_create(
        url: *const ::std::os::raw::c_char,
        parsingMode: ::std::os::raw::c_int,
    ) -> *mut DosQUrl;
}
extern "C" {
    /// \brief Free the memory allocated for the QUrl
    /// \param vptr The QUrl to be freed
    #[link_name = "\u{1}_Z15dos_qurl_delete"]
    pub fn dos_qurl_delete(vptr: *mut DosQUrl);
}
extern "C" {
    /// \brief Calls the QUrl::toString() function
    /// \param vptr The QUrl
    /// \return The url as an UTF-8 string
    /// \note The returned string should be freed using the dos_chararray_delete() function
    #[link_name = "\u{1}_Z18dos_qurl_to_string"]
    pub fn dos_qurl_to_string(vptr: *const DosQUrl) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Class the QUrl::isValid() function
    /// \param vptr The QUrl
    /// \return True if the QUrl is valid, false otherwise
    #[link_name = "\u{1}_Z16dos_qurl_isValid"]
    pub fn dos_qurl_isValid(vptr: *const DosQUrl) -> bool;
}
extern "C" {
    /// \brief Register a type in order to be instantiable from QML
    /// \return An integer value that represents the registration ID in the
    /// qml environment
    /// \note The \p qmlRegisterType is owned by the caller thus it will not be freed
    #[link_name = "\u{1}_Z32dos_qdeclarative_qmlregistertype"]
    pub fn dos_qdeclarative_qmlregistertype(
        qmlRegisterType: *const QmlRegisterType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Register a singleton type in order to be accessible from QML
    /// \return An integer value that represents the registration ID in the
    /// \note The \p qmlRegisterType is owned by the caller thus it will not be freed
    #[link_name = "\u{1}_Z41dos_qdeclarative_qmlregistersingletontype"]
    pub fn dos_qdeclarative_qmlregistersingletontype(
        qmlRegisterType: *const QmlRegisterType,
    ) -> ::std::os::raw::c_int;
}
